outcome <- gl(3,1,9)
treatment <- gl(3,3)
print(d.AD <- data.frame(treatment, outcome, counts))
glm.D93 <- glm(counts ~ outcome + treatment, family = poisson())
anova(glm.D93)
vcov(glm.D93)
deltaMethod(glm.D93,"outcome2")
summary(glm.D93)
glm.D93 <- glm(counts ~ outcome, family = poisson())
anova(glm.D93)
summary(glm.D93)
deltaMethod(glm.D93,"outcome2")
deltaMethod(glm.D93,"outcome2")
vcov(glm.D93)
summary(glm.D93)
h_P<-c(3.0445*exp(-0.04543),-0.4543*exp(-0.04543),-0.2930*exp(-0.04543))
t(h_P)
h_P
t(t(h_P))
t(t(h_P))%*%vcov(glm.D93)
t(h_))%*%vcov(glm.D93)
t(h_P)%*%vcov(glm.D93)
t(h_P)%*%vcov(glm.D93)*t(t(h_P))
t(h_P)%*%vcov(glm.D93)%*%t(t(h_P))
deltaMethod(glm.D93,"outcome2")
h_P<-c(coef(glm.D93)[1]*exp(coef(glm.D93)[2]),coef(glm.D93)[2]*exp(coef(glm.D93)[2]),coef(glm.D93)[3]*exp(coef(glm.D93)[2])
)
t(h_P)%*%vcov(glm.D93)*t(t(h_P))
h_P
t(h_P)
t(h_P)%*%vcov(glm.D93)
t(h_P)%*%vcov(glm.D93)*t(t(h_P))
t(t(h_P))
t(h_P)%*%vcov(glm.D93)%*%t(t(h_P))
deltaMethod(glm.D93,"outcome2")
coef(glm.D93)
coef(glm.D93)[1]*exp(coef(glm.D93)[2])
3.0445*exp(-0.454)
?deriv
deriv(~ x^2, "x")
eval(deriv(~ x^2, "x"))
eval(deriv(~ x^2, "2"))
c(3.0445*exp(-0.04543),-0.4543*exp(-0.04543),-0.2930*exp(-0.04543))
h_P
coef(glm.D93)
c(3.0445*exp(-0.4543),-0.4543*exp(-0.4543),-0.2930*exp(-0.4543))
deltaMethod(glm.D93,"outcome2")
t(h_P)%*%vcov(glm.D93)%*%t(t(h_P))
h_P
h_P%*%vcov(glm.D93)
t(h_P)%*%vcov(glm.D93)
t(h_P)
t(t(h_P))%*%vcov(glm.D93)
deltaMethod(glm.D93,"outcome2")
summaru(glm.D93)
summary(glm.D93)
deltaMethod(glm.D93,"outcome2+outcom3")
deltaMethod(glm.D93,"outcome2+outcome3")
deltaMethod(glm.D93,"intercept+outcome2+outcome3")
deltaMethod(glm.D93,"int+outcome2+outcome3")
deltaMethod(glm.D93,"(intercept)+outcome2+outcome3")
deltaMethod(glm.D93,"outcome2")
t(h_P)%*%vcov(glm.D93)%*%t(t(h_P))
sqrt(t(h_P)%*%vcov(glm.D93)%*%t(t(h_P)))
vcov(glm.D93)
summary(glm.D93)
sqrt(0.04087302)
shiny::runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
install.packages("devtools")
install.packages("rmarkdown")
devtools::install_github("mwritchie/standview")
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
library(knitr)
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
install.packages()
install.packages("xlsx")
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("openxlsx")
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
2:2
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
shiny::runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
shiny::runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
shiny::runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
shiny::runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
library(devtools)
devtools::install_github("mwritchie/standview")
shiny::runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
shiny::runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
runApp('OneDrive/Work/UBC Projects/SDMD_PP/SDMD_Shiny_app')
library(shiny); runApp('OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/R_codes/HT_trajectories_shiny.R')
trees <- read.table("C:/Users/woongsoonjang/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/Shiny_SCHRIP_temp.txt",sep=",",header=TRUE)
trees <- read.table("/Users/woongsoonjang/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/Shiny_SCHRIP_temp.txt",sep=",",header=TRUE)
Traj<-function(dataset){
#take subset of trees in a plot
par(mar = c(3.5,3.5,1.2,1), mgp = c(1.9, 0.6, 0))
plot(dataset$Age, dataset$HT, type="n", xlab="Age (Yr)",
ylim=c(0,30), ylab="Tree Height (m)",cex.axis=1.3,cex.lab=1.3)
tree_Id<-unique(dataset$TREE_ID)
for(i in 1:length(tree_Id)){
temp<-subset(dataset,  TREE_ID==tree_Id[i])
lines(temp$Age,temp$HT, type="l", col="grey")
}
text(6,30, adj=0, paste("No. of Plots: ", length(unique(dataset$PLOTID))))
text(6,28, adj=0, paste("Slope: ", round(coef(lm(HT~Age,dataset))[2],2)))
text(6,26, adj=0, paste("Intercept: ", round(coef(lm(HT~Age,dataset))[1],2)))
lines(loess.smooth(dataset$Age,dataset$HT),col="red",lwd=2)
}
shinyApp(
ui = fluidPage("SCHIRP Data Exploring",
fluidRow(
column(3, wellPanel(
selectInput(inputId="species",label="Species",
choices = c("Cw","Hw"),
selected = "Cw"),
selectInput(inputId="Fert",label="Fertilization",
choices = c("Yes"=1,"No"=0),
selected = "Yes"),
selectInput(inputId="SiteSeries",label="Site Series",
choices = c("1"=1,"6"=6,"14"=14,"13"=13),
selected = "1",multiple = TRUE),
helpText("1: Blueberry, 6: Deer fern, 13: Sphagnum, 14: Skunk Cabbage"),
selectInput(inputId="SMR",label="Soil Moisture",
choices = c("4"=4,"5"=5,"6"=6,"7"=7),
selected = "4",multiple = TRUE),
helpText("Higher number = wetter"),
selectInput(inputId="SNR",label="Soil Nutrient",
choices = c("M" ,"P","VP"),
selected = "M",multiple = TRUE),
helpText("Medium, Poor, Very Poor"),
selectInput(inputId="Punif",label="Plot uniformity",
choices = c("Yes"="y" ,"No"="n"),
selected = "y",multiple = TRUE)
)),
column(9, mainPanel(
plotOutput("trajectory", height="600px", width = "600px")
))
)
),
server = function(input, output) {
p1<-function(){
dataset <- subset(trees, SP_CODE%in%input$species &
Fert%in%input$Fert & SiteSeries%in%input$SiteSeries &
SMR%in%input$SMR & SNR%in%input$SNR & PlotUniform%in%input$Punif)
Traj(dataset)
}
output$trajectory = renderPlot(
p1()
)
}
)
shiny::runApp('OneDrive/MyDev/SDMD_PP')
shiny::runApp('OneDrive/MyDev/SDMD_PP')
shiny::runApp('OneDrive/MyDev/SDMD_PP')
shiny::runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
shiny::runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
x<-c(1,2,3,4,NA,NA,NA,NA)
x
x[!is.na(x)]
length(x[!is.na(x)])
x[length(x[!is.na(x)])]
c(x,1)
c(x,x[length(x[!is.na(x)])])
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
x
x[1:4]
x[1:4]<-4:1
x
x[6:3]
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
x[0]
test<-x[0]
test
length(test)
is.na(test)
runApp('OneDrive/MyDev/SDMD_PP')
x
is.na(x)
sum(is.na(x))
sum(!is.na(x))
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
plot(1,1,pch=19)
plot(1,1,pch=NA)
runApp('OneDrive/MyDev/SDMD_PP')
NA*10
NA*0
runApp('OneDrive/MyDev/SDMD_PP')
NA+19
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
runApp('OneDrive/MyDev/SDMD_PP')
rm(list=ls())
## define customized summarizing functions
summaF<-function(x) c(M=mean(x,na.rm=T), SE=sd(x,na.rm=T)/sqrt(length(x[!is.na(x)])), N=sum(x[!is.na(x)]))
cnt<-function(x) length(x[!is.na(x)])
## read tree-level data (creasted by SCHIRP_data_prep_tree.r)
mydata1<-read.table(file.path(dirname(dirname(getwd())), "SCHIRP_plot.txt"), sep=",",header = T)
getwd()
navbarPage("Unit Converter for Foresters",
# Give the title page
tabPanel("Length",
fluidRow(
column(3, wellPanel(
h5("Length: convert from:"),
splitLayout(
numericInput("origin", "", 1),
selectInput(inputId="l_origin","",
choices = c("cm", "m", "km", "inch", "feet", "yard", "mile"),
selected = "cm")),
splitLayout(
verbatimTextOutput("l_out"),
selectInput(inputId="l_target","",
choices = c("cm", "m", "km", "inch", "feet", "yard", "mile"),
selected = "cm"))
)))
)
)
navbarPage("Unit Converter for Foresters",
# Give the title page
tabPanel("Length",
fluidRow(
column(3, wellPanel(
h5("Length: convert from:"),
splitLayout(
numericInput("origin", "", 1),
selectInput(inputId="l_origin","",
choices = c("cm", "m", "km", "inch", "feet", "yard", "mile"),
selected = "cm")),
splitLayout(
verbatimTextOutput("l_out"),
selectInput(inputId="l_target","",
choices = c("cm", "m", "km", "inch", "feet", "yard", "mile"),
selected = "cm"))
)))
)
)
?navbarPage
??navbarPage
library(shiny)
navbarPage("Unit Converter for Foresters",
# Give the title page
tabPanel("Length",
fluidRow(
column(3, wellPanel(
h5("Length: convert from:"),
splitLayout(
numericInput("origin", "", 1),
selectInput(inputId="l_origin","",
choices = c("cm", "m", "km", "inch", "feet", "yard", "mile"),
selected = "cm")),
splitLayout(
verbatimTextOutput("l_out"),
selectInput(inputId="l_target","",
choices = c("cm", "m", "km", "inch", "feet", "yard", "mile"),
selected = "cm"))
)))
)
)
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
shiny::runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
shiny::runApp('OneDrive/MyDev/UConv')
.conversion
runApp('OneDrive/MyDev/UConv')
.conversions = data.frame(dim = character(0), unit = character(0), std = numeric(0))
.conversions = rbind(.conversions,
data.frame(dim = 'angle', unit = 'degree', std = 360),
data.frame(dim = 'angle', unit = 'radian', std = 2 * pi),
data.frame(dim = 'area', unit = 'cm2', std = 1e4),
data.frame(dim = 'area', unit = 'm2', std = 1),
data.frame(dim = 'area', unit = 'hectare', std = 1e-4),
data.frame(dim = 'area', unit = 'km2', std = 1e-6),
data.frame(dim = 'area', unit = 'inch2', std = (100/2.54)^2),
data.frame(dim = 'area', unit = 'ft2', std = (100/2.54/12)^2),
data.frame(dim = 'area', unit = 'yd2', std = (100/2.54/36)^2),
data.frame(dim = 'area', unit = 'acre', std = (100/2.54/12)^2/43560),
data.frame(dim = 'area', unit = 'mi2', std = (100/2.54/(12*5280))^2),
data.frame(dim = 'Length', unit = 'cm', std = 100),
data.frame(dim = 'Length', unit = 'm', std = 1),
data.frame(dim = 'Length', unit = 'km', std = 1e-3),
data.frame(dim = 'Length', unit = 'inch', std = 100/2.54),
data.frame(dim = 'Length', unit = 'ft', std = 100/2.54/12),
data.frame(dim = 'Length', unit = 'yd', std = 100/2.54/36),
data.frame(dim = 'Length', unit = 'mi', std = 100/2.54/12/5280),
data.frame(dim = 'mass', unit = 'mg', std = 1e3),
data.frame(dim = 'mass', unit = 'g', std = 1),
data.frame(dim = 'mass', unit = 'kg', std = 1e-3),
data.frame(dim = 'mass', unit = 'Mg', std = 1e-6),
data.frame(dim = 'mass', unit = 'carat', std = 5),
data.frame(dim = 'mass', unit = 'metric_ton', std = 1e-6),
data.frame(dim = 'mass', unit = 'oz', std = 1/28.349523125),
data.frame(dim = 'mass', unit = 'lbs', std = 2.20462234e-3),
data.frame(dim = 'mass', unit = 'short_ton', std = 1/907184.74),
data.frame(dim = 'mass', unit = 'long_ton', std = 1/1.016e6),
data.frame(dim = 'temperature', unit = 'C', std = NA),
data.frame(dim = 'temperature', unit = 'F', std = NA),
data.frame(dim = 'volume', unit = 'dl', std = 10),
data.frame(dim = 'volume', unit = 'l', std = 1),
data.frame(dim = 'volume', unit = 'cm3', std = 1e3),
data.frame(dim = 'volume', unit = 'dm3', std = 1),
data.frame(dim = 'volume', unit = 'm3', std = 1e-3),
data.frame(dim = 'volume', unit = 'oz', std = 1/3.785411784*128),
data.frame(dim = 'volume', unit = 'cup', std = 1/3.785411784*16),
data.frame(dim = 'volume', unit = 'pint', std = 1/3.785411784*8),
data.frame(dim = 'volume', unit = 'quart', std = 1/3.785411784*4),
data.frame(dim = 'volume', unit = 'gal', std = 1/3.785411784),
data.frame(dim = 'volume', unit = 'inch3', std = 61.0237440947323),
data.frame(dim = 'volume', unit = 'ft3', std = 61.0237440947323/12^3)
)
.coversion
.coversions
.conversions
subset(.conversions, (dim == input$dimension & unit == input$origin), std, drop = TRUE))
subset(.conversions, (dim == input$dimension & unit == input$origin), std, drop = TRUE)
subset(.conversions, (dim == "Length" & unit == "cm"), std, drop = TRUE)
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
.conversions
runApp('OneDrive/MyDev/UConv')
shiny::runApp('OneDrive/MyDev/UConv')
.conversions = data.frame(dim = character(0), unit = character(0), std = numeric(0))
.conversions = rbind(.conversions,
data.frame(dim = 'angle', unit = 'degree', std = 360),
data.frame(dim = 'angle', unit = 'radian', std = 2 * pi),
data.frame(dim = 'area', unit = 'cm2', std = 1e4),
data.frame(dim = 'area', unit = 'm2', std = 1),
data.frame(dim = 'area', unit = 'hectare', std = 1e-4),
data.frame(dim = 'area', unit = 'km2', std = 1e-6),
data.frame(dim = 'area', unit = 'inch2', std = (100/2.54)^2),
data.frame(dim = 'area', unit = 'ft2', std = (100/2.54/12)^2),
data.frame(dim = 'area', unit = 'yd2', std = (100/2.54/36)^2),
data.frame(dim = 'area', unit = 'acre', std = (100/2.54/12)^2/43560),
data.frame(dim = 'area', unit = 'mi2', std = (100/2.54/(12*5280))^2),
data.frame(dim = 'Length', unit = 'cm', std = 100),
data.frame(dim = 'Length', unit = 'm', std = 1),
data.frame(dim = 'Length', unit = 'km', std = 1e-3),
data.frame(dim = 'Length', unit = 'inch', std = 100/2.54),
data.frame(dim = 'Length', unit = 'ft', std = 100/2.54/12),
data.frame(dim = 'Length', unit = 'yd', std = 100/2.54/36),
data.frame(dim = 'Length', unit = 'mi', std = 100/2.54/12/5280),
data.frame(dim = 'mass', unit = 'mg', std = 1e3),
data.frame(dim = 'mass', unit = 'g', std = 1),
data.frame(dim = 'mass', unit = 'kg', std = 1e-3),
data.frame(dim = 'mass', unit = 'Mg', std = 1e-6),
data.frame(dim = 'mass', unit = 'carat', std = 5),
data.frame(dim = 'mass', unit = 'metric_ton', std = 1e-6),
data.frame(dim = 'mass', unit = 'oz', std = 1/28.349523125),
data.frame(dim = 'mass', unit = 'lbs', std = 2.20462234e-3),
data.frame(dim = 'mass', unit = 'short_ton', std = 1/907184.74),
data.frame(dim = 'mass', unit = 'long_ton', std = 1/1.016e6),
data.frame(dim = 'temperature', unit = 'C', std = NA),
data.frame(dim = 'temperature', unit = 'F', std = NA),
data.frame(dim = 'volume', unit = 'dl', std = 10),
data.frame(dim = 'volume', unit = 'l', std = 1),
data.frame(dim = 'volume', unit = 'cm3', std = 1e3),
data.frame(dim = 'volume', unit = 'dm3', std = 1),
data.frame(dim = 'volume', unit = 'm3', std = 1e-3),
data.frame(dim = 'volume', unit = 'oz', std = 1/3.785411784*128),
data.frame(dim = 'volume', unit = 'cup', std = 1/3.785411784*16),
data.frame(dim = 'volume', unit = 'pint', std = 1/3.785411784*8),
data.frame(dim = 'volume', unit = 'quart', std = 1/3.785411784*4),
data.frame(dim = 'volume', unit = 'gal', std = 1/3.785411784),
data.frame(dim = 'volume', unit = 'inch3', std = 61.0237440947323),
data.frame(dim = 'volume', unit = 'ft3', std = 61.0237440947323/12^3)
)
.head(conversions)
head(.conversions)
head(.conversions)[1]
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
.conversions = data.frame(dim = character(0), unit = character(0), std = numeric(0))
.conversions = rbind(.conversions,
data.frame(dim = 'angle', unit = 'degree', std = 360),
data.frame(dim = 'angle', unit = 'radian', std = 2 * pi),
data.frame(dim = 'area', unit = 'cm2', std = 1e4),
data.frame(dim = 'area', unit = 'm2', std = 1),
data.frame(dim = 'area', unit = 'hectare', std = 1e-4),
data.frame(dim = 'area', unit = 'km2', std = 1e-6),
data.frame(dim = 'area', unit = 'inch2', std = (100/2.54)^2),
data.frame(dim = 'area', unit = 'ft2', std = (100/2.54/12)^2),
data.frame(dim = 'area', unit = 'yd2', std = (100/2.54/36)^2),
data.frame(dim = 'area', unit = 'acre', std = (100/2.54/12)^2/43560),
data.frame(dim = 'area', unit = 'mi2', std = (100/2.54/(12*5280))^2),
data.frame(dim = 'Length', unit = 'cm', std = 100),
data.frame(dim = 'Length', unit = 'm', std = 1),
data.frame(dim = 'Length', unit = 'km', std = 1e-3),
data.frame(dim = 'Length', unit = 'inch', std = 100/2.54),
data.frame(dim = 'Length', unit = 'ft', std = 100/2.54/12),
data.frame(dim = 'Length', unit = 'yd', std = 100/2.54/36),
data.frame(dim = 'Length', unit = 'mi', std = 100/2.54/12/5280),
data.frame(dim = 'mass', unit = 'mg', std = 1e3),
data.frame(dim = 'mass', unit = 'g', std = 1),
data.frame(dim = 'mass', unit = 'kg', std = 1e-3),
data.frame(dim = 'mass', unit = 'Mg', std = 1e-6),
data.frame(dim = 'mass', unit = 'carat', std = 5),
data.frame(dim = 'mass', unit = 'metric_ton', std = 1e-6),
data.frame(dim = 'mass', unit = 'oz', std = 1/28.349523125),
data.frame(dim = 'mass', unit = 'lbs', std = 2.20462234e-3),
data.frame(dim = 'mass', unit = 'short_ton', std = 1/907184.74),
data.frame(dim = 'mass', unit = 'long_ton', std = 1/1.016e6),
data.frame(dim = 'temperature', unit = 'C', std = NA),
data.frame(dim = 'temperature', unit = 'F', std = NA),
data.frame(dim = 'volume', unit = 'dl', std = 10),
data.frame(dim = 'volume', unit = 'l', std = 1),
data.frame(dim = 'volume', unit = 'cm3', std = 1e3),
data.frame(dim = 'volume', unit = 'dm3', std = 1),
data.frame(dim = 'volume', unit = 'm3', std = 1e-3),
data.frame(dim = 'volume', unit = 'oz', std = 1/3.785411784*128),
data.frame(dim = 'volume', unit = 'cup', std = 1/3.785411784*16),
data.frame(dim = 'volume', unit = 'pint', std = 1/3.785411784*8),
data.frame(dim = 'volume', unit = 'quart', std = 1/3.785411784*4),
data.frame(dim = 'volume', unit = 'gal', std = 1/3.785411784),
data.frame(dim = 'volume', unit = 'inch3', std = 61.0237440947323),
data.frame(dim = 'volume', unit = 'ft3', std = 61.0237440947323/12^3)
)
subset(.conversions, (dim == input$dimension & unit == input$origin), std, drop = TRUE)
subset(.conversions, (dim == "Length" & unit == "cm"), std, drop = TRUE)
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
shiny::runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
getwd()
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
runApp('OneDrive/MyDev/UConv')
